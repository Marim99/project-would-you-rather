{"ast":null,"code":"var _jsxFileName = \"D:\\\\FWD\\\\would-you\\\\src\\\\components\\\\QuestionCard.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Image, Badge, Col, Row, Button } from 'react-bootstrap';\nimport { Card } from 'react-bootstrap/cjs';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QuestionCard extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handle = (e, id) => {\n      e.preventDefault();\n      this.props.history.push({\n        pathname: `/questions/${id}`\n      });\n    };\n  }\n\n  render() {\n    const {\n      question,\n      author,\n      id\n    } = this.props;\n    const {\n      optionOne,\n      optionTwo\n    } = question;\n    const {\n      name,\n      avatarURL\n    } = author;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        xs: 1,\n        md: 3,\n        className: \"g-4\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"bg-secondary text-white\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(Image, {\n              style: {\n                width: '75px',\n                height: '130px',\n                backgrounColor: '#fff'\n              },\n              rounded: true,\n              src: avatarURL !== 'undefined' ? avatarURL : 'logo'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            style: {\n              padding: '15px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n              style: {\n                fontSize: '25px',\n                fontWeight: 'bold'\n              },\n              children: [\"Would you rather \", /*#__PURE__*/_jsxDEV(Badge, {\n                bg: \"secondary\",\n                children: \"!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              className: \"text-muted\",\n              children: optionOne.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              bg: \"secondary\",\n              children: \"OR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              className: \"text-muted\",\n              children: optionTwo.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 9\n            }, this), this.props.isAnswerd ? /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"dark\",\n              onClick: e => this.handle(e, id),\n              children: /*#__PURE__*/_jsxDEV(Card.Link, {\n                to: `/questions/${id}`,\n                style: {\n                  color: '#fff',\n                  textDecoration: 'none'\n                },\n                children: \" View and Vote\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 66\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 9\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"dark\",\n              children: /*#__PURE__*/_jsxDEV(Card.Link, {\n                to: \"/about\",\n                style: {\n                  color: '#fff',\n                  textDecoration: 'none'\n                },\n                children: \" View Answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  questions,\n  users,\n  authedUser\n}, {\n  id\n}) {\n  const question = questions[id];\n  const author = users[question.author];\n  return {\n    author,\n    question,\n    authedUser\n  };\n}\n\nexport default withRouter(connect(mapStateToProps)(QuestionCard));","map":{"version":3,"sources":["D:/FWD/would-you/src/components/QuestionCard.js"],"names":["React","Component","Fragment","Image","Badge","Col","Row","Button","Card","connect","withRouter","Link","QuestionCard","handle","e","id","preventDefault","props","history","push","pathname","render","question","author","optionOne","optionTwo","name","avatarURL","width","height","backgrounColor","padding","fontSize","fontWeight","text","isAnswerd","color","textDecoration","mapStateToProps","questions","users","authedUser"],"mappings":"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","sourcesContent":["import React, { Component,Fragment} from 'react'\r\nimport { Image,Badge,Col,Row, Button } from 'react-bootstrap';\r\nimport { Card } from 'react-bootstrap/cjs';\r\nimport { connect } from 'react-redux'\r\nimport { withRouter} from 'react-router-dom'\r\nimport { Link} from 'react-router-dom'\r\nclass QuestionCard extends Component {\r\nhandle=(e,id)=>{\r\n    e.preventDefault()  \r\n  this.props.history.push({pathname: `/questions/${id}`})\r\n    \r\n}\r\n\r\nrender() { \r\n    const {question,author,id} = this.props\r\n    const { optionOne, optionTwo } = question;\r\n    const { name, avatarURL } = author;\r\n    return (\r\n        <Fragment>\r\n          \r\n    <Row xs={1} md={3} className=\"g-4\">\r\n    <Col>\r\n    <Card className=\"bg-secondary text-white\">\r\n    <Card.Title>{name}</Card.Title>\r\n    <Image style={{ width:'75px',height:'130px',backgrounColor:'#fff'}} rounded src={avatarURL!== 'undefined' ? avatarURL : 'logo'}/>\r\n    </Card>\r\n    </Col>\r\n    <Col>\r\n    {<Card style={{ padding:'15px'}}>\r\n        <Card.Text style={{ fontSize:'25px',fontWeight:'bold'}}>\r\n            \r\n                    Would you rather <Badge bg=\"secondary\">!</Badge>\r\n            \r\n        </Card.Text>\r\n        <Card.Text className=\"text-muted\">{optionOne.text}</Card.Text>\r\n        <small bg=\"secondary\">OR</small>\r\n        <Card.Text className=\"text-muted\">{optionTwo.text}</Card.Text>\r\n        \r\n        {this.props.isAnswerd ?\r\n        \r\n        <Button variant=\"dark\" onClick={(e)=>this.handle(e,id)} ><Card.Link  to={`/questions/${id}`} style={{ color:'#fff' , textDecoration: 'none'}}> View and Vote</Card.Link></Button>:\r\n        <Button variant=\"dark\"><Card.Link to=\"/about\" style={{ color:'#fff' , textDecoration: 'none'}}> View Answer</Card.Link></Button>}  \r\n    </Card>  \r\n    }\r\n    </Col>\r\n    </Row>\r\n        </Fragment>\r\n\r\n    );\r\n    }\r\n}\r\nfunction mapStateToProps ({ questions, users,authedUser }, { id }) {\r\n    const question = questions[id]\r\n    const author = users[question.author]\r\n    return {\r\n       author,\r\n       question,\r\n       authedUser\r\n    }\r\n  }\r\nexport default  withRouter (connect(mapStateToProps)(QuestionCard));"]},"metadata":{},"sourceType":"module"}