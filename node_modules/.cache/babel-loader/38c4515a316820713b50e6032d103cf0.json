{"ast":null,"code":"var _jsxFileName = \"D:\\\\FWD\\\\would-you\\\\src\\\\components\\\\CardVote.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Image, Badge, Col, Row, Button, Form } from 'react-bootstrap';\nimport { Card } from 'react-bootstrap/cjs';\nimport { withRouter } from 'react-router-dom';\nimport QuestionCard from './QuestionCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CardVote extends Component {\n  render() {\n    const {\n      question,\n      author,\n      id\n    } = this.props;\n    const {\n      optionOne,\n      optionTwo\n    } = question;\n    const {\n      name,\n      avatarURL\n    } = author;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col col-md-4\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: avatarURL,\n            className: \"card-img\",\n            alt: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this), this.props.unanswered ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col col-md-4\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            style: {\n              marginTop: '70px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"radio\",\n              label: optionOne.text,\n              name: optionOne,\n              id: \"optionOne\",\n              style: {\n                marginBottom: '30px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"radio\",\n              label: optionTwo.text,\n              name: optionTwo,\n              id: \"optionTwo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              children: \"Vote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  questions,\n  users\n}, props) {\n  const id = props.match.params.id;\n  const question = questions[id];\n  const author = users[question.author];\n  const unanswered = Object.keys(questions).filter(i => !questions[i].optionOne.votes.includes(authedUser) && !questions[i].optionTwo.votes.includes(authedUser));\n  const answered = Object.keys(questions).filter(i => questions[i].optionOne.votes.includes(authedUser) || questions[i].optionTwo.votes.includes(authedUser));\n  return {\n    id,\n    unanswered,\n    answered,\n    author,\n    question,\n    authedUser\n  };\n}\n\nexport default connect(mapStateToProps)(CardVote);","map":{"version":3,"sources":["D:/FWD/would-you/src/components/CardVote.js"],"names":["React","Component","Fragment","connect","Image","Badge","Col","Row","Button","Form","Card","withRouter","QuestionCard","CardVote","render","question","author","id","props","optionOne","optionTwo","name","avatarURL","unanswered","marginTop","text","marginBottom","mapStateToProps","authedUser","questions","users","match","params","Object","keys","filter","i","votes","includes","answered"],"mappings":"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","sourcesContent":["import React, { Component,Fragment} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Image,Badge,Col,Row, Button, Form } from 'react-bootstrap';\r\nimport { Card } from 'react-bootstrap/cjs';\r\nimport { withRouter } from 'react-router-dom'\r\nimport QuestionCard from './QuestionCard';\r\n\r\nclass CardVote extends Component {\r\n\r\n    render() {\r\n      const {question,author,id} = this.props\r\n      const { optionOne, optionTwo } = question;\r\n      const { name, avatarURL } = author;\r\n     \r\n        return(\r\n         <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            {name}\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col col-md-4\">\r\n            <img\r\n                  src={avatarURL}\r\n                  className='card-img'\r\n                  alt={name}\r\n                  />\r\n             \r\n            </div>\r\n            {this.props.unanswered?\r\n            <div className=\"col col-md-4\">\r\n           <Form style={{marginTop:'70px'}}>\r\n           <Form.Check\r\n            type=\"radio\"\r\n            label={optionOne.text}\r\n            name={optionOne}\r\n            id=\"optionOne\"\r\n            style={{marginBottom:'30px'}}\r\n          />\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label={optionTwo.text}\r\n            name={optionTwo}\r\n            id=\"optionTwo\"\r\n         />\r\n         <Button type=\"submit\">Vote</Button>\r\n           </Form>\r\n            </div>\r\n   :<div></div> }\r\n          </div>\r\n         </div> \r\n            )\r\n        \r\n    \r\n    }\r\n  }\r\n  \r\n  function mapStateToProps ({ authedUser, questions, users }, props) {\r\n    const id = props.match.params.id\r\n    const question = questions[id];\r\n    const author = users[question.author]\r\n    const unanswered = Object.keys(questions).filter((i)=>(\r\n      !questions[i].optionOne.votes.includes(authedUser)&&\r\n      !questions[i].optionTwo.votes.includes(authedUser)\r\n    ))\r\n    const answered = Object.keys(questions)\r\n    .filter((i) => (\r\n        questions[i].optionOne.votes.includes(authedUser) ||\r\n        questions[i].optionTwo.votes.includes(authedUser)\r\n    ))\r\n    return {\r\n      id,\r\n      unanswered,\r\n      answered,\r\n       author,\r\n       question,\r\n       authedUser\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps)(CardVote);"]},"metadata":{},"sourceType":"module"}