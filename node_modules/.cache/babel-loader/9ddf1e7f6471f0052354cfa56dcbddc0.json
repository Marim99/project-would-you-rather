{"ast":null,"code":"var _jsxFileName = \"D:\\\\FWD\\\\would-you\\\\src\\\\components\\\\CardDetails.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Image, Badge, Col, Row, Button, Form } from \"react-bootstrap\";\nimport { Card } from \"react-bootstrap/cjs\";\nimport { withRouter } from \"react-router-dom\";\nimport QuestionCard from \"./QuestionCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CardDetails extends Component {\n  render() {\n    const {\n      question,\n      author,\n      id\n    } = this.props;\n    const {\n      optionOne,\n      optionTwo\n    } = question;\n    const {\n      name,\n      avatarURL\n    } = author;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col col-md-4\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: avatarURL,\n            className: \"card-img\",\n            alt: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), this.props.isAnswered ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col col-md-4\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            style: {\n              marginTop: \"70px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"radio\",\n              label: optionOne.text,\n              name: optionOne,\n              id: \"optionOne\",\n              style: {\n                marginBottom: \"30px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"radio\",\n              label: optionTwo.text,\n              name: optionTwo,\n              id: \"optionTwo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              children: \"Vote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  questions,\n  users\n}, props) {\n  const id = props.match.params.id;\n  const question = questions[id];\n  const author = users[question.author];\n  const isAnswered = !!question ? question.optionOne.votes.includes(authedUser) || question.optionTwo.votes.includes(authedUser) : false;\n  return {\n    id,\n    isAnswered,\n    author,\n    question,\n    authedUser\n  };\n}\n\nexport default connect(mapStateToProps)(CardDetails);","map":{"version":3,"sources":["D:/FWD/would-you/src/components/CardDetails.js"],"names":["React","Component","Fragment","connect","Image","Badge","Col","Row","Button","Form","Card","withRouter","QuestionCard","CardDetails","render","question","author","id","props","optionOne","optionTwo","name","avatarURL","isAnswered","marginTop","text","marginBottom","mapStateToProps","authedUser","questions","users","match","params","votes","includes"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Image, Badge, Col, Row, Button, Form } from \"react-bootstrap\";\r\nimport { Card } from \"react-bootstrap/cjs\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport QuestionCard from \"./QuestionCard\";\r\n\r\nclass CardDetails extends Component {\r\n  render() {\r\n    const { question, author, id } = this.props;\r\n    const { optionOne, optionTwo } = question;\r\n    const { name, avatarURL } = author;\r\n\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">{name}</div>\r\n        <div className=\"row\">\r\n          <div className=\"col col-md-4\">\r\n            <img src={avatarURL} className=\"card-img\" alt={name} />\r\n          </div>\r\n          {this.props.isAnswered ? (\r\n            <div></div>\r\n          ) : (\r\n            <div className=\"col col-md-4\">\r\n              <Form style={{ marginTop: \"70px\" }}>\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label={optionOne.text}\r\n                  name={optionOne}\r\n                  id=\"optionOne\"\r\n                  style={{ marginBottom: \"30px\" }}\r\n                />\r\n                <Form.Check\r\n                  type=\"radio\"\r\n                  label={optionTwo.text}\r\n                  name={optionTwo}\r\n                  id=\"optionTwo\"\r\n                />\r\n                <Button type=\"submit\">Vote</Button>\r\n              </Form>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ authedUser, questions, users }, props) {\r\n  const id = props.match.params.id;\r\n  const question = questions[id];\r\n  const author = users[question.author];\r\n  const isAnswered = !!question\r\n    ? question.optionOne.votes.includes(authedUser) ||\r\n      question.optionTwo.votes.includes(authedUser)\r\n    : false;\r\n  return {\r\n    id,\r\n    isAnswered,\r\n    author,\r\n    question,\r\n    authedUser,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(CardDetails);\r\n"]},"metadata":{},"sourceType":"module"}