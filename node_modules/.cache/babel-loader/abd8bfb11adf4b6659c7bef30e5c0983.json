{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n/**\n * Safe chained function\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n *\n * @param {function} functions to chain\n * @returns {function|null}\n */\n\nfunction createChainedFunction(...funcs) {\n  return funcs.filter(f => f != null).reduce((acc, f) => {\n    if (typeof f !== 'function') {\n      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');\n    }\n\n    if (acc === null) return f;\n    return function chainedFunction(...args) {\n      // @ts-ignore\n      acc.apply(this, args); // @ts-ignore\n\n      f.apply(this, args);\n    };\n  }, null);\n}\n\nvar _default = createChainedFunction;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["D:/FWD/would-you/node_modules/react-bootstrap/cjs/createChainedFunction.js"],"names":["exports","__esModule","default","createChainedFunction","funcs","filter","f","reduce","acc","Error","chainedFunction","args","apply","_default","module"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,CAA+B,GAAGC,KAAlC,EAAyC;AACvC,SAAOA,KAAK,CAACC,MAAN,CAAaC,CAAC,IAAIA,CAAC,IAAI,IAAvB,EAA6BC,MAA7B,CAAoC,CAACC,GAAD,EAAMF,CAAN,KAAY;AACrD,QAAI,OAAOA,CAAP,KAAa,UAAjB,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAED,QAAID,GAAG,KAAK,IAAZ,EAAkB,OAAOF,CAAP;AAClB,WAAO,SAASI,eAAT,CAAyB,GAAGC,IAA5B,EAAkC;AACvC;AACAH,MAAAA,GAAG,CAACI,KAAJ,CAAU,IAAV,EAAgBD,IAAhB,EAFuC,CAEhB;;AAEvBL,MAAAA,CAAC,CAACM,KAAF,CAAQ,IAAR,EAAcD,IAAd;AACD,KALD;AAMD,GAZM,EAYJ,IAZI,CAAP;AAaD;;AAED,IAAIE,QAAQ,GAAGV,qBAAf;AACAH,OAAO,CAACE,OAAR,GAAkBW,QAAlB;AACAC,MAAM,CAACd,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Safe chained function\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n *\n * @param {function} functions to chain\n * @returns {function|null}\n */\nfunction createChainedFunction(...funcs) {\n  return funcs.filter(f => f != null).reduce((acc, f) => {\n    if (typeof f !== 'function') {\n      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');\n    }\n\n    if (acc === null) return f;\n    return function chainedFunction(...args) {\n      // @ts-ignore\n      acc.apply(this, args); // @ts-ignore\n\n      f.apply(this, args);\n    };\n  }, null);\n}\n\nvar _default = createChainedFunction;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}