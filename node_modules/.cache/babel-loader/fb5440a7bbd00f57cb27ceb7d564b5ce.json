{"ast":null,"code":"var _jsxFileName = \"D:\\\\FWD\\\\would-you\\\\src\\\\components\\\\CardVote.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Image, Badge, Col, Row, Button } from 'react-bootstrap';\nimport { Card } from 'react-bootstrap/cjs';\nimport { withRouter } from 'react-router-dom';\nimport QuestionCard from './QuestionCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CardVote extends Component {\n  render() {\n    const {\n      question,\n      author,\n      id\n    } = this.props;\n    const {\n      optionOne,\n      optionTwo\n    } = question;\n    const {\n      name,\n      avatarURL\n    } = author;\n\n    if (true) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row no-gutters\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: avatarURL,\n            className: \"card-img\",\n            alt: `Avatar of $name}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"username\",\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-8\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  questions,\n  users\n}, props) {\n  const id = props.match.params.id;\n  const question = questions[id];\n  const author = users[question.author];\n  return {\n    id,\n    author,\n    question,\n    authedUser\n  };\n}\n\nexport default connect(mapStateToProps)(CardVote);","map":{"version":3,"sources":["D:/FWD/would-you/src/components/CardVote.js"],"names":["React","Component","Fragment","connect","Image","Badge","Col","Row","Button","Card","withRouter","QuestionCard","CardVote","render","question","author","id","props","optionOne","optionTwo","name","avatarURL","mapStateToProps","authedUser","questions","users","match","params"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAeC,KAAf,EAAqBC,GAArB,EAAyBC,GAAzB,EAA8BC,MAA9B,QAA4C,iBAA5C;AACA,SAASC,IAAT,QAAqB,qBAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,MAAMC,QAAN,SAAuBX,SAAvB,CAAiC;AAE7BY,EAAAA,MAAM,GAAG;AACP,UAAM;AAACC,MAAAA,QAAD;AAAUC,MAAAA,MAAV;AAAiBC,MAAAA;AAAjB,QAAuB,KAAKC,KAAlC;AACA,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA2BL,QAAjC;AACA,UAAM;AAAEM,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAsBN,MAA5B;;AACA,QAAG,IAAH,EAAQ;AACN,0BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCACM;AACE,YAAA,GAAG,EAAEM,SADP;AAEE,YAAA,SAAS,EAAC,UAFZ;AAGE,YAAA,GAAG,EAAG;AAHR;AAAA;AAAA;AAAA;AAAA,kBADN,eAMQ;AAAG,YAAA,SAAS,EAAC,UAAb;AAAA,sBACGD;AADH;AAAA;AAAA;AAAA;AAAA,kBANR,eAUE;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADJ;AA+BG;AAEN;;AAxC4B;;AA2C/B,SAASE,eAAT,CAA0B;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA;AAAzB,CAA1B,EAA4DR,KAA5D,EAAmE;AACjE,QAAMD,EAAE,GAAGC,KAAK,CAACS,KAAN,CAAYC,MAAZ,CAAmBX,EAA9B;AACA,QAAMF,QAAQ,GAAGU,SAAS,CAACR,EAAD,CAA1B;AACA,QAAMD,MAAM,GAAGU,KAAK,CAACX,QAAQ,CAACC,MAAV,CAApB;AACA,SAAO;AACLC,IAAAA,EADK;AAEJD,IAAAA,MAFI;AAGJD,IAAAA,QAHI;AAIJS,IAAAA;AAJI,GAAP;AAMD;;AAED,eAAepB,OAAO,CAACmB,eAAD,CAAP,CAAyBV,QAAzB,CAAf","sourcesContent":["import React, { Component,Fragment} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Image,Badge,Col,Row, Button } from 'react-bootstrap';\r\nimport { Card } from 'react-bootstrap/cjs';\r\nimport { withRouter } from 'react-router-dom'\r\nimport QuestionCard from './QuestionCard';\r\n\r\nclass CardVote extends Component {\r\n\r\n    render() {\r\n      const {question,author,id} = this.props\r\n      const { optionOne, optionTwo } = question;\r\n      const { name, avatarURL } = author;\r\n      if(true){\r\n        return(\r\n            <div className='card'>\r\n              <div className='row no-gutters'>           \r\n                    <img\r\n                      src={avatarURL}\r\n                      className='card-img'\r\n                      alt={`Avatar of $name}`}\r\n                      />\r\n                      <p className='username'>\r\n                        {name}\r\n                      </p>\r\n              \r\n                <div className='col-md-8'>\r\n                  <div className='card-body'>\r\n                    {/*isAnswered && (\r\n                      <QuestionDetailItemResult\r\n                        question={question}\r\n                        vote={vote}\r\n                        />\r\n                    )}\r\n                    {!isAnswered && (\r\n                      <QuestionDetailItemVote\r\n                        question={question}\r\n                        saveQuestionAnswer = {this.saveQuestionAnswer}\r\n                        />\r\n                    )*/}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            )\r\n          }\r\n    \r\n    }\r\n  }\r\n  \r\n  function mapStateToProps ({ authedUser, questions, users }, props) {\r\n    const id = props.match.params.id\r\n    const question = questions[id];\r\n    const author = users[question.author]\r\n    return {\r\n      id,\r\n       author,\r\n       question,\r\n       authedUser\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps)(CardVote);"]},"metadata":{},"sourceType":"module"}