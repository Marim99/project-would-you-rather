{"ast":null,"code":"var _jsxFileName = \"D:\\\\FWD\\\\would-you\\\\src\\\\components\\\\CardVote.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Image, Badge, Col, Row, Button } from 'react-bootstrap';\nimport { Card } from 'react-bootstrap/cjs';\nimport { withRouter } from 'react-router-dom';\nimport QuestionCard from './QuestionCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CardVote extends Component {\n  render() {\n    const {\n      question,\n      author,\n      id\n    } = this.props;\n    const {\n      optionOne,\n      optionTwo\n    } = question;\n    const {\n      name,\n      avatarURL\n    } = author;\n    return /*#__PURE__*/_jsxDEV(Row, {\n      xs: 1,\n      md: 3,\n      className: \"g-4\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"bg-secondary text-white\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Image, {\n            style: {\n              width: '75px',\n              height: '130px',\n              backgrounColor: '#fff'\n            },\n            rounded: true,\n            src: avatarURL !== 'undefined' ? avatarURL : 'logo'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  questions,\n  users\n}, props) {\n  const id = props.match.params.id;\n  const question = questions[id];\n  const author = users[question.author];\n  return {\n    id,\n    author,\n    question,\n    authedUser\n  };\n}\n\nexport default connect(mapStateToProps)(CardVote);","map":{"version":3,"sources":["D:/FWD/would-you/src/components/CardVote.js"],"names":["React","Component","Fragment","connect","Image","Badge","Col","Row","Button","Card","withRouter","QuestionCard","CardVote","render","question","author","id","props","optionOne","optionTwo","name","avatarURL","width","height","backgrounColor","mapStateToProps","authedUser","questions","users","match","params"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAeC,KAAf,EAAqBC,GAArB,EAAyBC,GAAzB,EAA8BC,MAA9B,QAA4C,iBAA5C;AACA,SAASC,IAAT,QAAqB,qBAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,MAAMC,QAAN,SAAuBX,SAAvB,CAAiC;AAE7BY,EAAAA,MAAM,GAAG;AACP,UAAM;AAACC,MAAAA,QAAD;AAAUC,MAAAA,MAAV;AAAiBC,MAAAA;AAAjB,QAAuB,KAAKC,KAAlC;AACA,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA2BL,QAAjC;AACA,UAAM;AAAEM,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAsBN,MAA5B;AAEE,wBACE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,EAAE,EAAE,CAAhB;AAAmB,MAAA,SAAS,EAAC,KAA7B;AAAA,6BACA,QAAC,GAAD;AAAA,+BACA,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,yBAAhB;AAAA,kCACA,QAAC,IAAD,CAAM,KAAN;AAAA,sBAAaK;AAAb;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA,QAAC,KAAD;AAAO,YAAA,KAAK,EAAE;AAAEE,cAAAA,KAAK,EAAC,MAAR;AAAeC,cAAAA,MAAM,EAAC,OAAtB;AAA8BC,cAAAA,cAAc,EAAC;AAA7C,aAAd;AAAoE,YAAA,OAAO,MAA3E;AAA4E,YAAA,GAAG,EAAEH,SAAS,KAAI,WAAb,GAA2BA,SAA3B,GAAuC;AAAxH;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADF;AAaH;;AApB4B;;AAuB/B,SAASI,eAAT,CAA0B;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA;AAAzB,CAA1B,EAA4DX,KAA5D,EAAmE;AACjE,QAAMD,EAAE,GAAGC,KAAK,CAACY,KAAN,CAAYC,MAAZ,CAAmBd,EAA9B;AACA,QAAMF,QAAQ,GAAGa,SAAS,CAACX,EAAD,CAA1B;AACA,QAAMD,MAAM,GAAGa,KAAK,CAACd,QAAQ,CAACC,MAAV,CAApB;AACA,SAAO;AACLC,IAAAA,EADK;AAEJD,IAAAA,MAFI;AAGJD,IAAAA,QAHI;AAIJY,IAAAA;AAJI,GAAP;AAMD;;AAED,eAAevB,OAAO,CAACsB,eAAD,CAAP,CAAyBb,QAAzB,CAAf","sourcesContent":["import React, { Component,Fragment} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Image,Badge,Col,Row, Button } from 'react-bootstrap';\r\nimport { Card } from 'react-bootstrap/cjs';\r\nimport { withRouter } from 'react-router-dom'\r\nimport QuestionCard from './QuestionCard';\r\n\r\nclass CardVote extends Component {\r\n\r\n    render() {\r\n      const {question,author,id} = this.props\r\n      const { optionOne, optionTwo } = question;\r\n      const { name, avatarURL } = author;\r\n     \r\n        return(\r\n          <Row xs={1} md={3} className=\"g-4\">\r\n          <Col>\r\n          <Card className=\"bg-secondary text-white\">\r\n          <Card.Title>{name}</Card.Title>\r\n          <Image style={{ width:'75px',height:'130px',backgrounColor:'#fff'}} rounded src={avatarURL!== 'undefined' ? avatarURL : 'logo'}/>\r\n          </Card>\r\n          </Col>\r\n         \r\n          </Row>\r\n            )\r\n        \r\n    \r\n    }\r\n  }\r\n  \r\n  function mapStateToProps ({ authedUser, questions, users }, props) {\r\n    const id = props.match.params.id\r\n    const question = questions[id];\r\n    const author = users[question.author]\r\n    return {\r\n      id,\r\n       author,\r\n       question,\r\n       authedUser\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps)(CardVote);"]},"metadata":{},"sourceType":"module"}