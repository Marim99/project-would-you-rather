{"ast":null,"code":"var _jsxFileName = \"D:\\\\FWD\\\\would-you\\\\src\\\\components\\\\QuestionsList.js\";\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport QuestionCard from './QuestionCard';\nimport { Card } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QuestionsList extends Component {\n  render() {\n    const {\n      unanswered,\n      answered\n    } = this.props;\n    console.log(answered);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        children: unanswered.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(QuestionCard, {\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 37\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 15\n      }, this), \"guihui\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  authedUser,\n  questions\n}) {\n  const unanswered = Object.keys(questions).filter(i => !questions[i].optionOne.votes.includes(authedUser) && !questions[i].optionTwo.votes.includes(authedUser));\n  const answered = Object.keys(questions).filter(i => questions[i].optionOne.votes.includes(authedUser) || questions[i].optionTwo.votes.includes(authedUser));\n  return {\n    unanswered,\n    answered\n  };\n}\n\nexport default connect(mapStateToProps)(QuestionsList);","map":{"version":3,"sources":["D:/FWD/would-you/src/components/QuestionsList.js"],"names":["React","Component","connect","QuestionCard","Card","QuestionsList","render","unanswered","answered","props","console","log","map","id","mapStateToProps","authedUser","questions","Object","keys","filter","i","optionOne","votes","includes","optionTwo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,IAAT,QAAqB,iBAArB;;;AACA,MAAMC,aAAN,SAA4BJ,SAA5B,CAAsC;AAElCK,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA,UAAD;AAAYC,MAAAA;AAAZ,QAAwB,KAAKC,KAAnC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,wBACD;AAAA,8BACO,QAAC,IAAD;AAAA,kBACgBD,UAAU,CAACK,GAAX,CAAgBC,EAAD,iBACb;AAAA,iCACI,QAAC,YAAD;AAAc,YAAA,EAAE,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA;AADJ,WAASA,EAAT;AAAA;AAAA;AAAA;AAAA,gBADF;AADhB;AAAA;AAAA;AAAA;AAAA,cADP;AAAA;AAAA;AAAA;AAAA;AAAA,YADC;AAYH;;AAjBiC;;AAmBrC,SAASC,eAAT,CAA0B;AAACC,EAAAA,UAAD;AAAYC,EAAAA;AAAZ,CAA1B,EAAiD;AAC9C,QAAMT,UAAU,GAAGU,MAAM,CAACC,IAAP,CAAYF,SAAZ,EAAuBG,MAAvB,CAA+BC,CAAD,IAC/C,CAACJ,SAAS,CAACI,CAAD,CAAT,CAAaC,SAAb,CAAuBC,KAAvB,CAA6BC,QAA7B,CAAsCR,UAAtC,CAAD,IACA,CAACC,SAAS,CAACI,CAAD,CAAT,CAAaI,SAAb,CAAuBF,KAAvB,CAA6BC,QAA7B,CAAsCR,UAAtC,CAFgB,CAAnB;AAIA,QAAMP,QAAQ,GAAGS,MAAM,CAACC,IAAP,CAAYF,SAAZ,EAChBG,MADgB,CACRC,CAAD,IACJJ,SAAS,CAACI,CAAD,CAAT,CAAaC,SAAb,CAAuBC,KAAvB,CAA6BC,QAA7B,CAAsCR,UAAtC,KACAC,SAAS,CAACI,CAAD,CAAT,CAAaI,SAAb,CAAuBF,KAAvB,CAA6BC,QAA7B,CAAsCR,UAAtC,CAHa,CAAjB;AAKA,SAAO;AACHR,IAAAA,UADG;AAEHC,IAAAA;AAFG,GAAP;AAIF;;AACF,eAAeN,OAAO,CAACY,eAAD,CAAP,CAAyBT,aAAzB,CAAf","sourcesContent":["import React ,{ Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport QuestionCard from './QuestionCard';\r\nimport { Card } from \"react-bootstrap\";\r\nclass QuestionsList extends Component {\r\n   \r\n    render() { \r\n        const {unanswered,answered} = this.props\r\n        console.log(answered)\r\n        return  (\r\n       <div>\r\n           {  <Card >\r\n                            { unanswered.map((id) => (\r\n                                <li key={id} >\r\n                                    <QuestionCard id={id}/>\r\n                                </li>\r\n                            ))}\r\n                    </Card>}\r\n                    guihui\r\n       </div>\r\n        );\r\n    }\r\n}\r\n function mapStateToProps ({authedUser,questions}){\r\n    const unanswered = Object.keys(questions).filter((i)=>(\r\n      !questions[i].optionOne.votes.includes(authedUser)&&\r\n      !questions[i].optionTwo.votes.includes(authedUser)\r\n    ))\r\n    const answered = Object.keys(questions)\r\n    .filter((i) => (\r\n        questions[i].optionOne.votes.includes(authedUser) ||\r\n        questions[i].optionTwo.votes.includes(authedUser)\r\n    ))\r\n    return {\r\n        unanswered,\r\n        answered\r\n    }\r\n }\r\nexport default connect(mapStateToProps)(QuestionsList);"]},"metadata":{},"sourceType":"module"}